
require('dotenv').config()

import path from 'path'
import os from 'os'

import Nightmare from 'nightmare'
import pMap from 'p-map'
import download from 'download'
import ora from 'ora'
import delay from 'delay'
import spawn from '@ahmadnassri/spawn-promise'

nightmare = Nightmare({ show: false })
numDownloadsAtATime = Number(process.env.NUM_DOWNLOADS_AT_A_TIME) || 1
useragent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'

let numberOfVideos = 0

spinner = ora('Logging in').start()

nightmare
  .goto('https://app.pluralsight.com/id/')
  .insert('#Username', process.env.EMAIL)
  .insert('#Password', process.env.PASSWORD)
  .click('#login')
  .wait(1000)
  .goto(process.env.COURSE_TO_SCRAPE)
  .wait(3000)
  .evaluate(() ->
    courseTitle = document.title.replace(" | Pluralsight", "").replace(/[^a-z ]/ig, "") // so safe foldername
    [...document.querySelectorAll('a[class^="clipListTitle"')]
    .map(videoLink ->
      {
        videoName: videoLink.textContent.replace(/[^a-z ]/ig, ""), // so safe filename
        videoPageUrl: videoLink.href,
        courseTitle
      }
    )
    .filter(video -> video.videoPageUrl.length > 0)
  )
  .then(videos ->
    now numberOfVideos = videos.length
    spinner.text = 'Scraping video links'
    pMap(
      videos,
      getVideoSrcUrls,
      {concurrency: 1}
    )
  )
  .then(videos ->
    pMap(
      videos,
      downloadVideo,
      {concurrency: numDownloadsAtATime}
    )
  )
  .then(() -> nightmare.end())
  .then(notifyFinishedOnWindows)
  .then(() -> process.exit(0))
  .catch(e => {
    console.error(e)
    notifyFinishedOnWindows()
      .then(() => process.exit(1))
  })

getVideoSrcUrls(video, index):Promise ->
  randomDelay().then(() ->
    spinner.text = `Scraping [${ index + 1 }/${ numberOfVideos }]: ${ video.videoName }`
    nightmare
      .useragent(useragent)
      .goto(video.videoPageUrl)
      .wait("video")
      .wait(1500)
      .evaluate(() -> document.querySelector("video").src)
      .then(videoSrcUrl -> {...video, videoSrcUrl})
  )

downloadVideo({videoSrcUrl, courseTitle, videoName}, index):Promise ->
  randomDelay().then(() ->
    spinner.text = `Downloading [${ index + 1 }/${ numberOfVideos }]: ${ videoName }`
    download(
      videoSrcUrl,
      path.join('videos', courseTitle),
      { filename: `${ index + 1 }. ${ videoName }.webm` }
    )
    .then(() ->
      spinner.text = `Download [${ index + 1 }/${ numberOfVideos }]: ${ videoName } completed`
    )
  )

randomDelay():Promise ->
  delay(getRandomInt(1, 15) * 1000)

getRandomInt(min, max) ->
  Math.floor(Math.random() * (max - min + 1)) + min

notifyFinishedOnWindows() ->
  if os.platform() === 'win32':
    psfile = path.join(__dirname, 'win-tts-notify.ps1')
    return spawn('powershell.exe', [psfile])
  Promise.resolve()
